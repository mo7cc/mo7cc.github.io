import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,a as p,o as t}from"./app-CDcD9CqU.js";const e={};function l(c,n){return t(),a("div",null,[...n[0]||(n[0]=[p(`<h1 id="最长连续序列-longestconsecutive" tabindex="-1"><a class="header-anchor" href="#最长连续序列-longestconsecutive"><span>最长连续序列 (longestConsecutive)</span></a></h1><p><a href="https://leetcode.cn/problems/longest-consecutive-sequence" target="_blank" rel="noopener noreferrer">https://leetcode.cn/problems/longest-consecutive-sequence</a></p><hr><h2 id="解法思路" tabindex="-1"><a class="header-anchor" href="#解法思路"><span>解法思路</span></a></h2><p>用 target 挨个 减去 nums 中的项，然后得出结果，如果结果 nums 中存在，则记录下标</p><h2 id="javascript" tabindex="-1"><a class="header-anchor" href="#javascript"><span>JavaScript</span></a></h2><h2 id="golang" tabindex="-1"><a class="header-anchor" href="#golang"><span>Golang</span></a></h2><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go"><pre><code class="language-go"><span class="line"><span class="token comment">//go:build ignore</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">package</span> main</span>
<span class="line"></span>
<span class="line"><span class="token keyword">import</span> <span class="token punctuation">(</span></span>
<span class="line">	<span class="token string">&quot;fmt&quot;</span></span>
<span class="line">	<span class="token string">&quot;sort&quot;</span></span>
<span class="line"><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">	nums <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">{</span></span>
<span class="line">		<span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span></span>
<span class="line">	<span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">	results <span class="token operator">:=</span> <span class="token function">longestConsecutive</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span></span>
<span class="line">	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;results&quot;</span><span class="token punctuation">,</span> results<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">	results2 <span class="token operator">:=</span> <span class="token function">longestConsecutive2</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span></span>
<span class="line">	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;results2&quot;</span><span class="token punctuation">,</span> results2<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 暴力求解</span></span>
<span class="line"><span class="token comment">/*</span>
<span class="line">下一个减去上一个，结果为1则判定为有效</span>
<span class="line">*/</span></span>
<span class="line"><span class="token keyword">func</span> <span class="token function">longestConsecutive</span><span class="token punctuation">(</span>nums <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">{</span></span>
<span class="line">	<span class="token comment">// 去重</span></span>
<span class="line">	hasMap <span class="token operator">:=</span> <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token builtin">bool</span><span class="token punctuation">{</span><span class="token punctuation">}</span></span>
<span class="line">	newArr <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">{</span><span class="token punctuation">}</span></span>
<span class="line">	<span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> v <span class="token operator">:=</span> <span class="token keyword">range</span> nums <span class="token punctuation">{</span></span>
<span class="line">		<span class="token keyword">if</span> <span class="token operator">!</span>hasMap<span class="token punctuation">[</span>v<span class="token punctuation">]</span> <span class="token punctuation">{</span></span>
<span class="line">			hasMap<span class="token punctuation">[</span>v<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span></span>
<span class="line">			newArr <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>newArr<span class="token punctuation">,</span> v<span class="token punctuation">)</span></span>
<span class="line">		<span class="token punctuation">}</span></span>
<span class="line">	<span class="token punctuation">}</span></span>
<span class="line">	<span class="token comment">// 排序</span></span>
<span class="line">	sort<span class="token punctuation">.</span><span class="token function">Ints</span><span class="token punctuation">(</span>newArr<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">	<span class="token comment">// fmt.Println(&quot;newArr&quot;, newArr)</span></span>
<span class="line"></span>
<span class="line">	lineArr <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">{</span><span class="token punctuation">}</span></span>
<span class="line">	<span class="token comment">// result := [][]int{}</span></span>
<span class="line"></span>
<span class="line">	max <span class="token operator">:=</span> <span class="token number">0</span></span>
<span class="line"></span>
<span class="line">	<span class="token keyword">if</span> <span class="token function">len</span><span class="token punctuation">(</span>newArr<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span> <span class="token punctuation">{</span></span>
<span class="line">		<span class="token keyword">return</span> <span class="token number">1</span></span>
<span class="line">	<span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">	<span class="token keyword">for</span> idx<span class="token punctuation">,</span> item <span class="token operator">:=</span> <span class="token keyword">range</span> newArr <span class="token punctuation">{</span></span>
<span class="line">		nextIdx <span class="token operator">:=</span> idx <span class="token operator">+</span> <span class="token number">1</span></span>
<span class="line">		<span class="token keyword">if</span> nextIdx <span class="token operator">&gt;</span> <span class="token function">len</span><span class="token punctuation">(</span>newArr<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span> <span class="token punctuation">{</span></span>
<span class="line">			nextIdx <span class="token operator">=</span> <span class="token number">0</span></span>
<span class="line">		<span class="token punctuation">}</span></span>
<span class="line">		now <span class="token operator">:=</span> item</span>
<span class="line">		next <span class="token operator">:=</span> newArr<span class="token punctuation">[</span>nextIdx<span class="token punctuation">]</span></span>
<span class="line"></span>
<span class="line">		<span class="token keyword">if</span> next<span class="token operator">-</span>now <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">{</span></span>
<span class="line">			<span class="token keyword">continue</span></span>
<span class="line">		<span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">		<span class="token keyword">if</span> next<span class="token operator">-</span>now <span class="token operator">==</span> <span class="token number">1</span> <span class="token punctuation">{</span></span>
<span class="line">			lineArr <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>lineArr<span class="token punctuation">,</span> item<span class="token punctuation">)</span></span>
<span class="line">		<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">			lineArr <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>lineArr<span class="token punctuation">,</span> item<span class="token punctuation">)</span></span>
<span class="line">			<span class="token comment">// result = append(result, lineArr)</span></span>
<span class="line">			<span class="token keyword">if</span> <span class="token function">len</span><span class="token punctuation">(</span>lineArr<span class="token punctuation">)</span> <span class="token operator">&gt;</span> max <span class="token punctuation">{</span></span>
<span class="line">				max <span class="token operator">=</span> <span class="token function">len</span><span class="token punctuation">(</span>lineArr<span class="token punctuation">)</span></span>
<span class="line">			<span class="token punctuation">}</span></span>
<span class="line">			lineArr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">{</span><span class="token punctuation">}</span></span>
<span class="line">		<span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">	<span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">	<span class="token comment">// fmt.Println(&quot;result&quot;, result)</span></span>
<span class="line"></span>
<span class="line">	<span class="token keyword">return</span> max</span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 利用哈希表</span></span>
<span class="line"><span class="token comment">/*</span>
<span class="line">将数组映射成哈希表</span>
<span class="line">然后在哈希表中找-1的数字是否存在</span>
<span class="line">*/</span></span>
<span class="line"><span class="token keyword">func</span> <span class="token function">longestConsecutive2</span><span class="token punctuation">(</span>nums <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">{</span></span>
<span class="line">	numSet <span class="token operator">:=</span> <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token builtin">bool</span><span class="token punctuation">{</span><span class="token punctuation">}</span></span>
<span class="line">	<span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> num <span class="token operator">:=</span> <span class="token keyword">range</span> nums <span class="token punctuation">{</span></span>
<span class="line">		numSet<span class="token punctuation">[</span>num<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span></span>
<span class="line">	<span class="token punctuation">}</span></span>
<span class="line">	longestStreak <span class="token operator">:=</span> <span class="token number">0</span></span>
<span class="line">	<span class="token keyword">for</span> num <span class="token operator">:=</span> <span class="token keyword">range</span> numSet <span class="token punctuation">{</span></span>
<span class="line">		<span class="token keyword">if</span> <span class="token operator">!</span>numSet<span class="token punctuation">[</span>num<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token punctuation">{</span></span>
<span class="line">			currentNum <span class="token operator">:=</span> num</span>
<span class="line">			currentStreak <span class="token operator">:=</span> <span class="token number">1</span></span>
<span class="line">			<span class="token keyword">for</span> numSet<span class="token punctuation">[</span>currentNum<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token punctuation">{</span></span>
<span class="line">				currentNum<span class="token operator">++</span></span>
<span class="line">				currentStreak<span class="token operator">++</span></span>
<span class="line">			<span class="token punctuation">}</span></span>
<span class="line">			<span class="token keyword">if</span> longestStreak <span class="token operator">&lt;</span> currentStreak <span class="token punctuation">{</span></span>
<span class="line">				longestStreak <span class="token operator">=</span> currentStreak</span>
<span class="line">			<span class="token punctuation">}</span></span>
<span class="line">		<span class="token punctuation">}</span></span>
<span class="line">	<span class="token punctuation">}</span></span>
<span class="line">	<span class="token keyword">return</span> longestStreak</span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token comment">// 暴力求解</span></span>
<span class="line"><span class="token keyword">var</span> <span class="token function-variable function">longestConsecutive</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">nums</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token comment">//去重</span></span>
<span class="line">  <span class="token keyword">const</span> hasMap <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">const</span> newArr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> item <span class="token keyword">of</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>hasMap<span class="token punctuation">[</span>item<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      hasMap<span class="token punctuation">[</span>item<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span></span>
<span class="line">      newArr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line">  <span class="token comment">// 排序</span></span>
<span class="line">  newArr<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">return</span> a <span class="token operator">-</span> b<span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">let</span> lineArr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">let</span> max <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">if</span> <span class="token punctuation">(</span>newArr<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> newArr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">let</span> nextIdx <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>nextIdx <span class="token operator">&gt;</span> newArr<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      nextIdx <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token keyword">const</span> now <span class="token operator">=</span> newArr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">const</span> next <span class="token operator">=</span> newArr<span class="token punctuation">[</span>nextIdx<span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>next <span class="token operator">-</span> now <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token keyword">continue</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>next <span class="token operator">-</span> now <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      lineArr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>now<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">      lineArr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>now<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">      result<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>lineArr<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token keyword">if</span> <span class="token punctuation">(</span>lineArr<span class="token punctuation">.</span>length <span class="token operator">&gt;</span> max<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        max <span class="token operator">=</span> lineArr<span class="token punctuation">.</span>length<span class="token punctuation">;</span></span>
<span class="line">      <span class="token punctuation">}</span></span>
<span class="line">      lineArr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;result&#39;</span><span class="token punctuation">,</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">return</span> max<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 代码执行块</span></span>
<span class="line"><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">const</span> nums <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token function">longestConsecutive</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;result&#39;</span><span class="token punctuation">,</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,9)])])}const u=s(e,[["render",l]]),r=JSON.parse('{"path":"/coder/leetcode/longestConsecutive.html","title":"最长连续序列 (longestConsecutive)","lang":"zh-CN","frontmatter":{"permalink":"/coder/leetcode/longestConsecutive.html","description":"最长连续序列 (longestConsecutive) https://leetcode.cn/problems/longest-consecutive-sequence 解法思路 用 target 挨个 减去 nums 中的项，然后得出结果，如果结果 nums 中存在，则记录下标 JavaScript Golang","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"最长连续序列 (longestConsecutive)\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-08-19T04:13:15.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"墨七\\",\\"url\\":\\"https://mo7.cc\\",\\"email\\":\\"mo7@mo7.cc\\"}]}"],["meta",{"property":"og:url","content":"https://mo7.cc/coder/leetcode/longestConsecutive.html"}],["meta",{"property":"og:site_name","content":"墨七"}],["meta",{"property":"og:title","content":"最长连续序列 (longestConsecutive)"}],["meta",{"property":"og:description","content":"最长连续序列 (longestConsecutive) https://leetcode.cn/problems/longest-consecutive-sequence 解法思路 用 target 挨个 减去 nums 中的项，然后得出结果，如果结果 nums 中存在，则记录下标 JavaScript Golang"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-08-19T04:13:15.000Z"}],["meta",{"property":"article:modified_time","content":"2025-08-19T04:13:15.000Z"}]]},"git":{"createdTime":1732683764000,"updatedTime":1755576795000,"contributors":[{"name":"墨七","username":"","email":"meichangliang@outlook.com","commits":8}]},"readingTime":{"minutes":0.18,"words":54},"filePathRelative":"coder/leetcode/最长连续序列/README.md","excerpt":"\\n<p><a href=\\"https://leetcode.cn/problems/longest-consecutive-sequence\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">https://leetcode.cn/problems/longest-consecutive-sequence</a></p>\\n<hr>\\n<h2>解法思路</h2>\\n<p>用 target 挨个 减去 nums 中的项，然后得出结果，如果结果 nums 中存在，则记录下标</p>\\n<h2>JavaScript</h2>\\n<h2>Golang</h2>\\n<div class=\\"language-go line-numbers-mode\\" data-highlighter=\\"prismjs\\" data-ext=\\"go\\"><pre><code class=\\"language-go\\"><span class=\\"line\\"><span class=\\"token comment\\">//go:build ignore</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span class=\\"token keyword\\">package</span> main</span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span class=\\"token keyword\\">import</span> <span class=\\"token punctuation\\">(</span></span>\\n<span class=\\"line\\">\\t<span class=\\"token string\\">\\"fmt\\"</span></span>\\n<span class=\\"line\\">\\t<span class=\\"token string\\">\\"sort\\"</span></span>\\n<span class=\\"line\\"><span class=\\"token punctuation\\">)</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span class=\\"token keyword\\">func</span> <span class=\\"token function\\">main</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span></span>\\n<span class=\\"line\\">\\tnums <span class=\\"token operator\\">:=</span> <span class=\\"token punctuation\\">[</span><span class=\\"token punctuation\\">]</span><span class=\\"token builtin\\">int</span><span class=\\"token punctuation\\">{</span></span>\\n<span class=\\"line\\">\\t\\t<span class=\\"token number\\">0</span><span class=\\"token punctuation\\">,</span> <span class=\\"token number\\">1</span><span class=\\"token punctuation\\">,</span> <span class=\\"token number\\">1</span><span class=\\"token punctuation\\">,</span> <span class=\\"token number\\">2</span><span class=\\"token punctuation\\">,</span></span>\\n<span class=\\"line\\">\\t<span class=\\"token punctuation\\">}</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\">\\tresults <span class=\\"token operator\\">:=</span> <span class=\\"token function\\">longestConsecutive</span><span class=\\"token punctuation\\">(</span>nums<span class=\\"token punctuation\\">)</span></span>\\n<span class=\\"line\\">\\tfmt<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">Println</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"results\\"</span><span class=\\"token punctuation\\">,</span> results<span class=\\"token punctuation\\">)</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\">\\tresults2 <span class=\\"token operator\\">:=</span> <span class=\\"token function\\">longestConsecutive2</span><span class=\\"token punctuation\\">(</span>nums<span class=\\"token punctuation\\">)</span></span>\\n<span class=\\"line\\">\\tfmt<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">Println</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"results2\\"</span><span class=\\"token punctuation\\">,</span> results2<span class=\\"token punctuation\\">)</span></span>\\n<span class=\\"line\\"><span class=\\"token punctuation\\">}</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span class=\\"token comment\\">// 暴力求解</span></span>\\n<span class=\\"line\\"><span class=\\"token comment\\">/*</span>\\n<span class=\\"line\\">下一个减去上一个，结果为1则判定为有效</span>\\n<span class=\\"line\\">*/</span></span>\\n<span class=\\"line\\"><span class=\\"token keyword\\">func</span> <span class=\\"token function\\">longestConsecutive</span><span class=\\"token punctuation\\">(</span>nums <span class=\\"token punctuation\\">[</span><span class=\\"token punctuation\\">]</span><span class=\\"token builtin\\">int</span><span class=\\"token punctuation\\">)</span> <span class=\\"token builtin\\">int</span> <span class=\\"token punctuation\\">{</span></span>\\n<span class=\\"line\\">\\t<span class=\\"token comment\\">// 去重</span></span>\\n<span class=\\"line\\">\\thasMap <span class=\\"token operator\\">:=</span> <span class=\\"token keyword\\">map</span><span class=\\"token punctuation\\">[</span><span class=\\"token builtin\\">int</span><span class=\\"token punctuation\\">]</span><span class=\\"token builtin\\">bool</span><span class=\\"token punctuation\\">{</span><span class=\\"token punctuation\\">}</span></span>\\n<span class=\\"line\\">\\tnewArr <span class=\\"token operator\\">:=</span> <span class=\\"token punctuation\\">[</span><span class=\\"token punctuation\\">]</span><span class=\\"token builtin\\">int</span><span class=\\"token punctuation\\">{</span><span class=\\"token punctuation\\">}</span></span>\\n<span class=\\"line\\">\\t<span class=\\"token keyword\\">for</span> <span class=\\"token boolean\\">_</span><span class=\\"token punctuation\\">,</span> v <span class=\\"token operator\\">:=</span> <span class=\\"token keyword\\">range</span> nums <span class=\\"token punctuation\\">{</span></span>\\n<span class=\\"line\\">\\t\\t<span class=\\"token keyword\\">if</span> <span class=\\"token operator\\">!</span>hasMap<span class=\\"token punctuation\\">[</span>v<span class=\\"token punctuation\\">]</span> <span class=\\"token punctuation\\">{</span></span>\\n<span class=\\"line\\">\\t\\t\\thasMap<span class=\\"token punctuation\\">[</span>v<span class=\\"token punctuation\\">]</span> <span class=\\"token operator\\">=</span> <span class=\\"token boolean\\">true</span></span>\\n<span class=\\"line\\">\\t\\t\\tnewArr <span class=\\"token operator\\">=</span> <span class=\\"token function\\">append</span><span class=\\"token punctuation\\">(</span>newArr<span class=\\"token punctuation\\">,</span> v<span class=\\"token punctuation\\">)</span></span>\\n<span class=\\"line\\">\\t\\t<span class=\\"token punctuation\\">}</span></span>\\n<span class=\\"line\\">\\t<span class=\\"token punctuation\\">}</span></span>\\n<span class=\\"line\\">\\t<span class=\\"token comment\\">// 排序</span></span>\\n<span class=\\"line\\">\\tsort<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">Ints</span><span class=\\"token punctuation\\">(</span>newArr<span class=\\"token punctuation\\">)</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\">\\t<span class=\\"token comment\\">// fmt.Println(\\"newArr\\", newArr)</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\">\\tlineArr <span class=\\"token operator\\">:=</span> <span class=\\"token punctuation\\">[</span><span class=\\"token punctuation\\">]</span><span class=\\"token builtin\\">int</span><span class=\\"token punctuation\\">{</span><span class=\\"token punctuation\\">}</span></span>\\n<span class=\\"line\\">\\t<span class=\\"token comment\\">// result := [][]int{}</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\">\\tmax <span class=\\"token operator\\">:=</span> <span class=\\"token number\\">0</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\">\\t<span class=\\"token keyword\\">if</span> <span class=\\"token function\\">len</span><span class=\\"token punctuation\\">(</span>newArr<span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">==</span> <span class=\\"token number\\">1</span> <span class=\\"token punctuation\\">{</span></span>\\n<span class=\\"line\\">\\t\\t<span class=\\"token keyword\\">return</span> <span class=\\"token number\\">1</span></span>\\n<span class=\\"line\\">\\t<span class=\\"token punctuation\\">}</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\">\\t<span class=\\"token keyword\\">for</span> idx<span class=\\"token punctuation\\">,</span> item <span class=\\"token operator\\">:=</span> <span class=\\"token keyword\\">range</span> newArr <span class=\\"token punctuation\\">{</span></span>\\n<span class=\\"line\\">\\t\\tnextIdx <span class=\\"token operator\\">:=</span> idx <span class=\\"token operator\\">+</span> <span class=\\"token number\\">1</span></span>\\n<span class=\\"line\\">\\t\\t<span class=\\"token keyword\\">if</span> nextIdx <span class=\\"token operator\\">&gt;</span> <span class=\\"token function\\">len</span><span class=\\"token punctuation\\">(</span>newArr<span class=\\"token punctuation\\">)</span><span class=\\"token operator\\">-</span><span class=\\"token number\\">1</span> <span class=\\"token punctuation\\">{</span></span>\\n<span class=\\"line\\">\\t\\t\\tnextIdx <span class=\\"token operator\\">=</span> <span class=\\"token number\\">0</span></span>\\n<span class=\\"line\\">\\t\\t<span class=\\"token punctuation\\">}</span></span>\\n<span class=\\"line\\">\\t\\tnow <span class=\\"token operator\\">:=</span> item</span>\\n<span class=\\"line\\">\\t\\tnext <span class=\\"token operator\\">:=</span> newArr<span class=\\"token punctuation\\">[</span>nextIdx<span class=\\"token punctuation\\">]</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\">\\t\\t<span class=\\"token keyword\\">if</span> next<span class=\\"token operator\\">-</span>now <span class=\\"token operator\\">==</span> <span class=\\"token number\\">0</span> <span class=\\"token punctuation\\">{</span></span>\\n<span class=\\"line\\">\\t\\t\\t<span class=\\"token keyword\\">continue</span></span>\\n<span class=\\"line\\">\\t\\t<span class=\\"token punctuation\\">}</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\">\\t\\t<span class=\\"token keyword\\">if</span> next<span class=\\"token operator\\">-</span>now <span class=\\"token operator\\">==</span> <span class=\\"token number\\">1</span> <span class=\\"token punctuation\\">{</span></span>\\n<span class=\\"line\\">\\t\\t\\tlineArr <span class=\\"token operator\\">=</span> <span class=\\"token function\\">append</span><span class=\\"token punctuation\\">(</span>lineArr<span class=\\"token punctuation\\">,</span> item<span class=\\"token punctuation\\">)</span></span>\\n<span class=\\"line\\">\\t\\t<span class=\\"token punctuation\\">}</span> <span class=\\"token keyword\\">else</span> <span class=\\"token punctuation\\">{</span></span>\\n<span class=\\"line\\">\\t\\t\\tlineArr <span class=\\"token operator\\">=</span> <span class=\\"token function\\">append</span><span class=\\"token punctuation\\">(</span>lineArr<span class=\\"token punctuation\\">,</span> item<span class=\\"token punctuation\\">)</span></span>\\n<span class=\\"line\\">\\t\\t\\t<span class=\\"token comment\\">// result = append(result, lineArr)</span></span>\\n<span class=\\"line\\">\\t\\t\\t<span class=\\"token keyword\\">if</span> <span class=\\"token function\\">len</span><span class=\\"token punctuation\\">(</span>lineArr<span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">&gt;</span> max <span class=\\"token punctuation\\">{</span></span>\\n<span class=\\"line\\">\\t\\t\\t\\tmax <span class=\\"token operator\\">=</span> <span class=\\"token function\\">len</span><span class=\\"token punctuation\\">(</span>lineArr<span class=\\"token punctuation\\">)</span></span>\\n<span class=\\"line\\">\\t\\t\\t<span class=\\"token punctuation\\">}</span></span>\\n<span class=\\"line\\">\\t\\t\\tlineArr <span class=\\"token operator\\">=</span> <span class=\\"token punctuation\\">[</span><span class=\\"token punctuation\\">]</span><span class=\\"token builtin\\">int</span><span class=\\"token punctuation\\">{</span><span class=\\"token punctuation\\">}</span></span>\\n<span class=\\"line\\">\\t\\t<span class=\\"token punctuation\\">}</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\">\\t<span class=\\"token punctuation\\">}</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\">\\t<span class=\\"token comment\\">// fmt.Println(\\"result\\", result)</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\">\\t<span class=\\"token keyword\\">return</span> max</span>\\n<span class=\\"line\\"><span class=\\"token punctuation\\">}</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span class=\\"token comment\\">// 利用哈希表</span></span>\\n<span class=\\"line\\"><span class=\\"token comment\\">/*</span>\\n<span class=\\"line\\">将数组映射成哈希表</span>\\n<span class=\\"line\\">然后在哈希表中找-1的数字是否存在</span>\\n<span class=\\"line\\">*/</span></span>\\n<span class=\\"line\\"><span class=\\"token keyword\\">func</span> <span class=\\"token function\\">longestConsecutive2</span><span class=\\"token punctuation\\">(</span>nums <span class=\\"token punctuation\\">[</span><span class=\\"token punctuation\\">]</span><span class=\\"token builtin\\">int</span><span class=\\"token punctuation\\">)</span> <span class=\\"token builtin\\">int</span> <span class=\\"token punctuation\\">{</span></span>\\n<span class=\\"line\\">\\tnumSet <span class=\\"token operator\\">:=</span> <span class=\\"token keyword\\">map</span><span class=\\"token punctuation\\">[</span><span class=\\"token builtin\\">int</span><span class=\\"token punctuation\\">]</span><span class=\\"token builtin\\">bool</span><span class=\\"token punctuation\\">{</span><span class=\\"token punctuation\\">}</span></span>\\n<span class=\\"line\\">\\t<span class=\\"token keyword\\">for</span> <span class=\\"token boolean\\">_</span><span class=\\"token punctuation\\">,</span> num <span class=\\"token operator\\">:=</span> <span class=\\"token keyword\\">range</span> nums <span class=\\"token punctuation\\">{</span></span>\\n<span class=\\"line\\">\\t\\tnumSet<span class=\\"token punctuation\\">[</span>num<span class=\\"token punctuation\\">]</span> <span class=\\"token operator\\">=</span> <span class=\\"token boolean\\">true</span></span>\\n<span class=\\"line\\">\\t<span class=\\"token punctuation\\">}</span></span>\\n<span class=\\"line\\">\\tlongestStreak <span class=\\"token operator\\">:=</span> <span class=\\"token number\\">0</span></span>\\n<span class=\\"line\\">\\t<span class=\\"token keyword\\">for</span> num <span class=\\"token operator\\">:=</span> <span class=\\"token keyword\\">range</span> numSet <span class=\\"token punctuation\\">{</span></span>\\n<span class=\\"line\\">\\t\\t<span class=\\"token keyword\\">if</span> <span class=\\"token operator\\">!</span>numSet<span class=\\"token punctuation\\">[</span>num<span class=\\"token operator\\">-</span><span class=\\"token number\\">1</span><span class=\\"token punctuation\\">]</span> <span class=\\"token punctuation\\">{</span></span>\\n<span class=\\"line\\">\\t\\t\\tcurrentNum <span class=\\"token operator\\">:=</span> num</span>\\n<span class=\\"line\\">\\t\\t\\tcurrentStreak <span class=\\"token operator\\">:=</span> <span class=\\"token number\\">1</span></span>\\n<span class=\\"line\\">\\t\\t\\t<span class=\\"token keyword\\">for</span> numSet<span class=\\"token punctuation\\">[</span>currentNum<span class=\\"token operator\\">+</span><span class=\\"token number\\">1</span><span class=\\"token punctuation\\">]</span> <span class=\\"token punctuation\\">{</span></span>\\n<span class=\\"line\\">\\t\\t\\t\\tcurrentNum<span class=\\"token operator\\">++</span></span>\\n<span class=\\"line\\">\\t\\t\\t\\tcurrentStreak<span class=\\"token operator\\">++</span></span>\\n<span class=\\"line\\">\\t\\t\\t<span class=\\"token punctuation\\">}</span></span>\\n<span class=\\"line\\">\\t\\t\\t<span class=\\"token keyword\\">if</span> longestStreak <span class=\\"token operator\\">&lt;</span> currentStreak <span class=\\"token punctuation\\">{</span></span>\\n<span class=\\"line\\">\\t\\t\\t\\tlongestStreak <span class=\\"token operator\\">=</span> currentStreak</span>\\n<span class=\\"line\\">\\t\\t\\t<span class=\\"token punctuation\\">}</span></span>\\n<span class=\\"line\\">\\t\\t<span class=\\"token punctuation\\">}</span></span>\\n<span class=\\"line\\">\\t<span class=\\"token punctuation\\">}</span></span>\\n<span class=\\"line\\">\\t<span class=\\"token keyword\\">return</span> longestStreak</span>\\n<span class=\\"line\\"><span class=\\"token punctuation\\">}</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"></span></code></pre>\\n<div class=\\"line-numbers\\" aria-hidden=\\"true\\" style=\\"counter-reset:line-number 0\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}');export{u as comp,r as data};
