import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,a as e,o as t}from"./app-CDcD9CqU.js";const p={};function o(c,n){return t(),a("div",null,[...n[0]||(n[0]=[e(`<h1 id="_5-在-md-中使用自定义组件" tabindex="-1"><a class="header-anchor" href="#_5-在-md-中使用自定义组件"><span>5.在 md 中使用自定义组件</span></a></h1><p>上一个章节讲到的是使用全局组件来对主题和博客进行修改，其实本质上是通过 vue 组件的形式进行了全局的 js 和 css 的引入。和直接 <code>&lt;link href=&quot;xxx&quot; /&gt; &lt;script src=&quot;xxx&quot;&gt;</code> 的形式没啥区别。不过使用 vue 组件看起来比较优雅而已。<br> 而且 vue 组件的代码内容一定会经过 vite 的优化，代码的执行效率会更高。</p><p>这里讲另外两种自定义组件的使用方式:</p><h2 id="全局注册-markdown-调用" tabindex="-1"><a class="header-anchor" href="#全局注册-markdown-调用"><span>全局注册，Markdown 调用</span></a></h2><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> defineClientConfig <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vuepress/client&#39;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">defineClientConfig</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">  <span class="token comment">// ...</span></span>
<span class="line">  <span class="token function">enhance</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> app<span class="token punctuation">,</span> router<span class="token punctuation">,</span> siteData <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    app<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token string">&#39;MyIcon&#39;</span><span class="token punctuation">,</span> MyIcon<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token comment">// ...</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后在 Markdown 文件中直接使用该组件即可。</p><div class="language-markdown line-numbers-mode" data-highlighter="prismjs" data-ext="md"><pre><code class="language-markdown"><span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>MyIcon</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>zhanzhang<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h2 id="markdown-局部注册使用" tabindex="-1"><a class="header-anchor" href="#markdown-局部注册使用"><span>Markdown 局部注册使用</span></a></h2><p>在 Markdown 中直接使用 vue 语法进行组件的引入和使用。</p><div class="language-markdown line-numbers-mode" data-highlighter="prismjs" data-ext="md"><pre><code class="language-markdown"><span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>HomePageUser</span> <span class="token punctuation">/&gt;</span></span></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>HomePageDevelop</span> <span class="token punctuation">/&gt;</span></span></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>HomePageBBS</span> <span class="token punctuation">/&gt;</span></span></span>
<span class="line"></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">setup</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">import &quot;@components/HomePage.scss&quot;;</span>
<span class="line">import HomePageUser from &quot;@components/HomePageUser.vue&quot;;</span>
<span class="line">import HomePageDevelop from &quot;@components/HomePageDevelop.vue&quot;;</span>
<span class="line">import HomePageBBS from &quot;@components/HomePageBBS.vue&quot;;</span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>参考文档 ：</p><p><a href="https://theme-hope.vuejs.press/zh/guide/component/sfc.html" target="_blank" rel="noopener noreferrer">https://theme-hope.vuejs.press/zh/guide/component/sfc.html</a></p><hr><p>这两种调用方式各有千秋：<br> 全局注册的好处是用起来方便，缺点是无论当前页面是否用到了这个插件，都得承担插件带来的性能和体积负担。<br> 局部注册用起来虽然麻烦，但是只有在当前页面打开的时候才会加载和调用该插件。</p>`,14)])])}const u=s(p,[["render",o]]),r=JSON.parse(`{"path":"/misc/vuepress-hope/step_md_components.html","title":"5.在 md 中使用自定义组件","lang":"zh-CN","frontmatter":{"order":5,"permalink":"/misc/vuepress-hope/step_md_components.html","description":"5.在 md 中使用自定义组件 上一个章节讲到的是使用全局组件来对主题和博客进行修改，其实本质上是通过 vue 组件的形式进行了全局的 js 和 css 的引入。和直接 <link href=\\"xxx\\" /> <script src=\\"xxx\\"> 的形式没啥区别。不过使用 vue 组件看起来比较优雅而已。 而且 vue 组件的代码内容一定会经过 vit...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"5.在 md 中使用自定义组件\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-07-04T14:04:00.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"墨七\\",\\"url\\":\\"https://mo7.cc\\",\\"email\\":\\"mo7@mo7.cc\\"}]}"],["meta",{"property":"og:url","content":"https://mo7.cc/misc/vuepress-hope/step_md_components.html"}],["meta",{"property":"og:site_name","content":"墨七"}],["meta",{"property":"og:title","content":"5.在 md 中使用自定义组件"}],["meta",{"property":"og:description","content":"5.在 md 中使用自定义组件 上一个章节讲到的是使用全局组件来对主题和博客进行修改，其实本质上是通过 vue 组件的形式进行了全局的 js 和 css 的引入。和直接 <link href=\\"xxx\\" /> <script src=\\"xxx\\"> 的形式没啥区别。不过使用 vue 组件看起来比较优雅而已。 而且 vue 组件的代码内容一定会经过 vit..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-07-04T14:04:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-07-04T14:04:00.000Z"}]]},"git":{"createdTime":1732683764000,"updatedTime":1751637840000,"contributors":[{"name":"墨七","username":"","email":"meichangliang@outlook.com","commits":5}]},"readingTime":{"minutes":1.15,"words":345},"filePathRelative":"misc/vuepress-hope/5.在md中使用自定义组件.md","excerpt":"\\n<p>上一个章节讲到的是使用全局组件来对主题和博客进行修改，其实本质上是通过 vue 组件的形式进行了全局的 js 和 css 的引入。和直接 <code>&lt;link href=\\"xxx\\" /&gt;   &lt;script src=\\"xxx\\"&gt;</code> 的形式没啥区别。不过使用 vue 组件看起来比较优雅而已。<br>\\n而且 vue 组件的代码内容一定会经过 vite 的优化，代码的执行效率会更高。</p>\\n<p>这里讲另外两种自定义组件的使用方式:</p>\\n<h2>全局注册，Markdown 调用</h2>\\n<div class=\\"language-javascript line-numbers-mode\\" data-highlighter=\\"prismjs\\" data-ext=\\"js\\"><pre><code class=\\"language-javascript\\"><span class=\\"line\\"><span class=\\"token keyword\\">import</span> <span class=\\"token punctuation\\">{</span> defineClientConfig <span class=\\"token punctuation\\">}</span> <span class=\\"token keyword\\">from</span> <span class=\\"token string\\">'vuepress/client'</span><span class=\\"token punctuation\\">;</span></span>\\n<span class=\\"line\\"><span class=\\"token keyword\\">export</span> <span class=\\"token keyword\\">default</span> <span class=\\"token function\\">defineClientConfig</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">{</span></span>\\n<span class=\\"line\\">  <span class=\\"token comment\\">// ...</span></span>\\n<span class=\\"line\\">  <span class=\\"token function\\">enhance</span><span class=\\"token punctuation\\">(</span><span class=\\"token parameter\\"><span class=\\"token punctuation\\">{</span> app<span class=\\"token punctuation\\">,</span> router<span class=\\"token punctuation\\">,</span> siteData <span class=\\"token punctuation\\">}</span></span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span></span>\\n<span class=\\"line\\">    app<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">component</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">'MyIcon'</span><span class=\\"token punctuation\\">,</span> MyIcon<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span></span>\\n<span class=\\"line\\">  <span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">,</span></span>\\n<span class=\\"line\\">  <span class=\\"token comment\\">// ...</span></span>\\n<span class=\\"line\\"><span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span></span>\\n<span class=\\"line\\"></span></code></pre>\\n<div class=\\"line-numbers\\" aria-hidden=\\"true\\" style=\\"counter-reset:line-number 0\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}`);export{u as comp,r as data};
