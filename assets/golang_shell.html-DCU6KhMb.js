import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,a as e,o as i}from"./app-CDcD9CqU.js";const l={};function t(p,n){return i(),a("div",null,[...n[0]||(n[0]=[e(`<h1 id="将-golang-作为脚本语言使用" tabindex="-1"><a class="header-anchor" href="#将-golang-作为脚本语言使用"><span>将 golang 作为脚本语言使用</span></a></h1><div class="hint-container warning"><p class="hint-container-title">注意</p><p>该文档有待补充和完善</p></div><p>为什么？</p><p><a href="https://github.com/erning/gorun" target="_blank" rel="noopener noreferrer">https://github.com/erning/gorun</a></p><h2 id="使用方式" tabindex="-1"><a class="header-anchor" href="#使用方式"><span>使用方式</span></a></h2><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code class="language-bash"><span class="line"><span class="token comment"># 安装 gorun</span></span>
<span class="line">go <span class="token function">install</span> github.com/erning/gorun@latest</span>
<span class="line"></span>
<span class="line"><span class="token comment"># 添加环境变量</span></span>
<span class="line"><span class="token function">sudo</span> <span class="token function">ln</span> <span class="token parameter variable">-s</span> ~/go/bin/gorun /usr/local/bin/gorun</span>
<span class="line"></span>
<span class="line"><span class="token comment"># 使用方式</span></span>
<span class="line">gorun demo.go</span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="区别" tabindex="-1"><a class="header-anchor" href="#区别"><span>区别</span></a></h2><div class="code-block-with-title"><div class="code-block-title-bar" data-title="file:main.go"><span>file:main.go</span></div><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go"><pre><code class="language-go"><span class="line"><span class="token comment">// 2&gt;/dev/null ; gorun &quot;$0&quot; &quot;$@&quot; ; exit $?</span></span>
<span class="line"><span class="token keyword">package</span> main</span>
<span class="line"></span>
<span class="line"><span class="token keyword">import</span> <span class="token punctuation">(</span></span>
<span class="line">	<span class="token string">&quot;fmt&quot;</span></span>
<span class="line">	<span class="token string">&quot;os&quot;</span></span>
<span class="line"><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;Hello&quot;</span><span class="token punctuation">,</span> os<span class="token punctuation">.</span>Args<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span></span>
<span class="line">	os<span class="token punctuation">.</span><span class="token function">Exit</span><span class="token punctuation">(</span><span class="token number">42</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code class="language-bash"><span class="line">go run ./main.go</span>
<span class="line"><span class="token builtin class-name">echo</span> <span class="token variable">$?</span></span>
<span class="line"><span class="token comment"># 执行的结果是 1</span></span>
<span class="line"></span>
<span class="line">go build ./main.go</span>
<span class="line">./main</span>
<span class="line"><span class="token builtin class-name">echo</span> <span class="token variable">$?</span></span>
<span class="line"><span class="token comment"># 执行的结果是 42</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>gorun 将：<br> 将文件写入 <code>$TMPDIR</code> （或 <code>/tmp</code>）中的安全目录下，这样就不会触及实际脚本位置（可能是只读的）<br> 避免同一文件的并行执行之间的竞争<br> 自动清理一段时间内未使用的旧编译文件（无竞争）<br> 取代流程，而不是使用子流程<br> 正确地将参数传递给已编译的应用程序<br> 处理好 GOROOT、GOROOT_FINAL 和工具链的位置<br> 支持嵌入的 go.mod、go.sum 和用于编译的环境变量 - 可以确保可重复构建</p>`,10)])])}const r=s(l,[["render",t]]),d=JSON.parse('{"path":"/coder/go/golang_shell.html","title":"将 golang 作为脚本语言使用","lang":"zh-CN","frontmatter":{"permalink":"/coder/go/golang_shell.html","description":"将 golang 作为脚本语言使用 注意 该文档有待补充和完善 为什么？ https://github.com/erning/gorun 使用方式 区别 file:main.go gorun 将： 将文件写入 $TMPDIR （或 /tmp）中的安全目录下，这样就不会触及实际脚本位置（可能是只读的） 避免同一文件的并行执行之间的竞争 自动清理一段时间内...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"将 golang 作为脚本语言使用\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-07-04T14:04:00.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"墨七\\",\\"url\\":\\"https://mo7.cc\\",\\"email\\":\\"mo7@mo7.cc\\"}]}"],["meta",{"property":"og:url","content":"https://mo7.cc/coder/go/golang_shell.html"}],["meta",{"property":"og:site_name","content":"墨七"}],["meta",{"property":"og:title","content":"将 golang 作为脚本语言使用"}],["meta",{"property":"og:description","content":"将 golang 作为脚本语言使用 注意 该文档有待补充和完善 为什么？ https://github.com/erning/gorun 使用方式 区别 file:main.go gorun 将： 将文件写入 $TMPDIR （或 /tmp）中的安全目录下，这样就不会触及实际脚本位置（可能是只读的） 避免同一文件的并行执行之间的竞争 自动清理一段时间内..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-07-04T14:04:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-07-04T14:04:00.000Z"}]]},"git":{"createdTime":1732683764000,"updatedTime":1751637840000,"contributors":[{"name":"墨七","username":"","email":"meichangliang@outlook.com","commits":7}]},"readingTime":{"minutes":0.82,"words":246},"filePathRelative":"coder/go/将golang作为脚本语言使用.md","excerpt":"\\n<div class=\\"hint-container warning\\">\\n<p class=\\"hint-container-title\\">注意</p>\\n<p>该文档有待补充和完善</p>\\n</div>\\n<p>为什么？</p>\\n<p><a href=\\"https://github.com/erning/gorun\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">https://github.com/erning/gorun</a></p>\\n<h2>使用方式</h2>\\n<div class=\\"language-bash line-numbers-mode\\" data-highlighter=\\"prismjs\\" data-ext=\\"sh\\"><pre><code class=\\"language-bash\\"><span class=\\"line\\"><span class=\\"token comment\\"># 安装 gorun</span></span>\\n<span class=\\"line\\">go <span class=\\"token function\\">install</span> github.com/erning/gorun@latest</span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span class=\\"token comment\\"># 添加环境变量</span></span>\\n<span class=\\"line\\"><span class=\\"token function\\">sudo</span> <span class=\\"token function\\">ln</span> <span class=\\"token parameter variable\\">-s</span> ~/go/bin/gorun /usr/local/bin/gorun</span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span class=\\"token comment\\"># 使用方式</span></span>\\n<span class=\\"line\\">gorun demo.go</span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"></span></code></pre>\\n<div class=\\"line-numbers\\" aria-hidden=\\"true\\" style=\\"counter-reset:line-number 0\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}');export{r as comp,d as data};
