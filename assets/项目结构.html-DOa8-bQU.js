import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,a as e,o as i}from"./app-CDcD9CqU.js";const l={};function p(c,s){return i(),a("div",null,[...s[0]||(s[0]=[e(`<h1 id="go-项目结构" tabindex="-1"><a class="header-anchor" href="#go-项目结构"><span>go 项目结构</span></a></h1><p>Go 语言的项目结构遵循一些约定俗成的最佳实践，这些实践有助于代码的组织、维护和复用。以下是一个标准的 Go 项目结构示例及相关说明：</p><h3 id="标准项目结构" tabindex="-1"><a class="header-anchor" href="#标准项目结构"><span><strong>标准项目结构</strong></span></a></h3><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text"><pre><code class="language-text"><span class="line">my-project/</span>
<span class="line">├── cmd/                    # 主应用程序入口</span>
<span class="line">│   └── myapp/              # 可执行文件名称</span>
<span class="line">│       └── main.go         # 程序入口点</span>
<span class="line">├── internal/               # 内部模块（不可被外部引用）</span>
<span class="line">│   ├── models/             # 数据模型</span>
<span class="line">│   ├── repositories/       # 数据访问层</span>
<span class="line">│   ├── services/           # 业务逻辑层</span>
<span class="line">│   └── utils/              # 工具函数</span>
<span class="line">├── pkg/                    # 公共模块（可被外部引用）</span>
<span class="line">│   ├── api/                # API接口定义</span>
<span class="line">│   └── client/             # 客户端库</span>
<span class="line">├── configs/                # 配置文件模板</span>
<span class="line">├── scripts/                # 脚本文件</span>
<span class="line">├── tests/                  # 集成测试</span>
<span class="line">├── docs/                   # 文档</span>
<span class="line">├── vendor/                 # 依赖包（Go 1.14+ 推荐使用go mod代替）</span>
<span class="line">├── go.mod                  # 模块依赖定义</span>
<span class="line">├── go.sum                  # 依赖校验文件</span>
<span class="line">└── Makefile                # 构建脚本</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="关键目录说明" tabindex="-1"><a class="header-anchor" href="#关键目录说明"><span><strong>关键目录说明</strong></span></a></h3><h4 id="_1-cmd-应用程序入口" tabindex="-1"><a class="header-anchor" href="#_1-cmd-应用程序入口"><span><strong>1. <code>cmd/</code> - 应用程序入口</strong></span></a></h4><p>存放项目的主程序入口文件，每个子目录对应一个可执行文件。</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go"><pre><code class="language-go"><span class="line"><span class="token comment">// cmd/myapp/main.go</span></span>
<span class="line"><span class="token keyword">package</span> main</span>
<span class="line"></span>
<span class="line"><span class="token keyword">import</span> <span class="token string">&quot;my-project/internal/app&quot;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    app<span class="token punctuation">.</span><span class="token function">Run</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-internal-内部模块" tabindex="-1"><a class="header-anchor" href="#_2-internal-内部模块"><span><strong>2. <code>internal/</code> - 内部模块</strong></span></a></h4><p>Go 语言特有的目录，其中的包不能被外部项目导入，适合存放私有代码。</p><ul><li><strong>models/</strong>：定义数据结构和数据库模型。</li><li><strong>repositories/</strong>：处理数据访问（如数据库操作）。</li><li><strong>services/</strong>：实现业务逻辑。</li><li><strong>controllers/</strong>（可选）：处理 HTTP 请求（适用于 Web 应用）。</li></ul><h4 id="_3-pkg-公共模块" tabindex="-1"><a class="header-anchor" href="#_3-pkg-公共模块"><span><strong>3. <code>pkg/</code> - 公共模块</strong></span></a></h4><p>存放可被外部引用的公共代码，如工具库、客户端 API 等。</p><h4 id="_4-configs-配置文件" tabindex="-1"><a class="header-anchor" href="#_4-configs-配置文件"><span><strong>4. <code>configs/</code> - 配置文件</strong></span></a></h4><p>存放配置模板或示例文件，例如：</p><div class="language-yaml line-numbers-mode" data-highlighter="prismjs" data-ext="yml"><pre><code class="language-yaml"><span class="line"><span class="token comment"># configs/config.yaml</span></span>
<span class="line"><span class="token key atrule">database</span><span class="token punctuation">:</span></span>
<span class="line">  <span class="token key atrule">host</span><span class="token punctuation">:</span> localhost</span>
<span class="line">  <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">5432</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_5-scripts-脚本文件" tabindex="-1"><a class="header-anchor" href="#_5-scripts-脚本文件"><span><strong>5. <code>scripts/</code> - 脚本文件</strong></span></a></h4><p>存放构建、部署或测试的脚本，如：</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code class="language-bash"><span class="line"><span class="token comment"># scripts/setup_db.sh</span></span>
<span class="line"><span class="token comment">#!/bin/bash</span></span>
<span class="line">psql <span class="token parameter variable">-U</span> postgres <span class="token parameter variable">-c</span> <span class="token string">&quot;CREATE DATABASE mydb;&quot;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_6-tests-测试代码" tabindex="-1"><a class="header-anchor" href="#_6-tests-测试代码"><span><strong>6. <code>tests/</code> - 测试代码</strong></span></a></h4><p>存放集成测试或端到端测试，单元测试通常放在各模块的<code>*_test.go</code>文件中。</p><h3 id="go-modules-管理依赖" tabindex="-1"><a class="header-anchor" href="#go-modules-管理依赖"><span><strong>Go Modules 管理依赖</strong></span></a></h3><p>Go 1.11+ 引入了模块系统，使用<code>go.mod</code>文件管理依赖：</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text"><pre><code class="language-text"><span class="line"># go.mod</span>
<span class="line">module github.com/username/my-project</span>
<span class="line"></span>
<span class="line">go 1.20</span>
<span class="line"></span>
<span class="line">require (</span>
<span class="line">    github.com/gin-gonic/gin v1.9.0</span>
<span class="line">    gorm.io/gorm v1.25.1</span>
<span class="line">)</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="工具与构建" tabindex="-1"><a class="header-anchor" href="#工具与构建"><span><strong>工具与构建</strong></span></a></h3><p>推荐使用<code>Makefile</code>简化常用命令：</p><div class="language-makefile line-numbers-mode" data-highlighter="prismjs" data-ext="makefile"><pre><code class="language-makefile"><span class="line"><span class="token comment"># Makefile</span></span>
<span class="line"><span class="token target symbol">build</span><span class="token punctuation">:</span></span>
<span class="line">    go build -o bin/myapp cmd/myapp/main.go</span>
<span class="line"></span>
<span class="line"><span class="token target symbol">test</span><span class="token punctuation">:</span></span>
<span class="line">    go test ./...</span>
<span class="line"></span>
<span class="line"><span class="token target symbol">run</span><span class="token punctuation">:</span></span>
<span class="line">    go run cmd/myapp/main.go</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="web-应用扩展结构" tabindex="-1"><a class="header-anchor" href="#web-应用扩展结构"><span><strong>Web 应用扩展结构</strong></span></a></h3><p>如果是 Web 应用，可增加以下目录：</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text"><pre><code class="language-text"><span class="line">my-project/</span>
<span class="line">├── web/                    # Web相关资源</span>
<span class="line">│   ├── static/             # 静态文件（CSS、JS、图片）</span>
<span class="line">│   └── templates/          # 模板文件</span>
<span class="line">├── api/                    # API接口定义</span>
<span class="line">│   ├── v1/                 # 版本1</span>
<span class="line">│   │   ├── handlers/       # HTTP处理函数</span>
<span class="line">│   │   └── routes/         # 路由定义</span>
<span class="line">│   └── docs/               # API文档</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="最佳实践" tabindex="-1"><a class="header-anchor" href="#最佳实践"><span><strong>最佳实践</strong></span></a></h3><ol><li><strong>单一职责原则</strong>：每个包专注于单一功能。</li><li><strong>最小化依赖</strong>：避免包之间的循环依赖。</li><li><strong>测试优先</strong>：为每个功能编写单元测试。</li><li><strong>配置外部化</strong>：通过环境变量或配置文件管理参数。</li><li><strong>使用标准库</strong>：优先使用 Go 标准库，减少第三方依赖。</li></ol><p>通过遵循这些结构和原则，你的 Go 项目将更易于理解、维护和扩展。如果需要针对特定类型的项目（如微服务、CLI 工具）的结构建议，可以进一步说明！</p>`,33)])])}const r=n(l,[["render",p]]),o=JSON.parse('{"path":"/coder/go/%E9%A1%B9%E7%9B%AE%E7%BB%93%E6%9E%84.html","title":"go 项目结构","lang":"zh-CN","frontmatter":{"description":"go 项目结构 Go 语言的项目结构遵循一些约定俗成的最佳实践，这些实践有助于代码的组织、维护和复用。以下是一个标准的 Go 项目结构示例及相关说明： 标准项目结构 关键目录说明 1. cmd/ - 应用程序入口 存放项目的主程序入口文件，每个子目录对应一个可执行文件。 2. internal/ - 内部模块 Go 语言特有的目录，其中的包不能被外部项...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"go 项目结构\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-07-21T08:33:13.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"墨七\\",\\"url\\":\\"https://mo7.cc\\",\\"email\\":\\"mo7@mo7.cc\\"}]}"],["meta",{"property":"og:url","content":"https://mo7.cc/coder/go/%E9%A1%B9%E7%9B%AE%E7%BB%93%E6%9E%84.html"}],["meta",{"property":"og:site_name","content":"墨七"}],["meta",{"property":"og:title","content":"go 项目结构"}],["meta",{"property":"og:description","content":"go 项目结构 Go 语言的项目结构遵循一些约定俗成的最佳实践，这些实践有助于代码的组织、维护和复用。以下是一个标准的 Go 项目结构示例及相关说明： 标准项目结构 关键目录说明 1. cmd/ - 应用程序入口 存放项目的主程序入口文件，每个子目录对应一个可执行文件。 2. internal/ - 内部模块 Go 语言特有的目录，其中的包不能被外部项..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-07-21T08:33:13.000Z"}],["meta",{"property":"article:modified_time","content":"2025-07-21T08:33:13.000Z"}]]},"git":{"createdTime":1753082594000,"updatedTime":1753086793000,"contributors":[{"name":"墨七","username":"","email":"meichangliang@outlook.com","commits":2}]},"readingTime":{"minutes":2.47,"words":741},"filePathRelative":"coder/go/项目结构.md","excerpt":"\\n<p>Go 语言的项目结构遵循一些约定俗成的最佳实践，这些实践有助于代码的组织、维护和复用。以下是一个标准的 Go 项目结构示例及相关说明：</p>\\n<h3><strong>标准项目结构</strong></h3>\\n<div class=\\"language-text line-numbers-mode\\" data-highlighter=\\"prismjs\\" data-ext=\\"text\\"><pre><code class=\\"language-text\\"><span class=\\"line\\">my-project/</span>\\n<span class=\\"line\\">├── cmd/                    # 主应用程序入口</span>\\n<span class=\\"line\\">│   └── myapp/              # 可执行文件名称</span>\\n<span class=\\"line\\">│       └── main.go         # 程序入口点</span>\\n<span class=\\"line\\">├── internal/               # 内部模块（不可被外部引用）</span>\\n<span class=\\"line\\">│   ├── models/             # 数据模型</span>\\n<span class=\\"line\\">│   ├── repositories/       # 数据访问层</span>\\n<span class=\\"line\\">│   ├── services/           # 业务逻辑层</span>\\n<span class=\\"line\\">│   └── utils/              # 工具函数</span>\\n<span class=\\"line\\">├── pkg/                    # 公共模块（可被外部引用）</span>\\n<span class=\\"line\\">│   ├── api/                # API接口定义</span>\\n<span class=\\"line\\">│   └── client/             # 客户端库</span>\\n<span class=\\"line\\">├── configs/                # 配置文件模板</span>\\n<span class=\\"line\\">├── scripts/                # 脚本文件</span>\\n<span class=\\"line\\">├── tests/                  # 集成测试</span>\\n<span class=\\"line\\">├── docs/                   # 文档</span>\\n<span class=\\"line\\">├── vendor/                 # 依赖包（Go 1.14+ 推荐使用go mod代替）</span>\\n<span class=\\"line\\">├── go.mod                  # 模块依赖定义</span>\\n<span class=\\"line\\">├── go.sum                  # 依赖校验文件</span>\\n<span class=\\"line\\">└── Makefile                # 构建脚本</span>\\n<span class=\\"line\\"></span></code></pre>\\n<div class=\\"line-numbers\\" aria-hidden=\\"true\\" style=\\"counter-reset:line-number 0\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}');export{r as comp,o as data};
